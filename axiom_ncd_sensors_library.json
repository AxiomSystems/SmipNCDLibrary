{"meta":{"file_version":"4.0.2","database_name":"eleventhree","export_timestamp":"2023-10-19T12:01:16.452774+00:00","export_library_fqn":["ncd_sensors"],"database_schema_version":"4.6.7"},"types":[{"fqn":["ncd_sensors","ncd_environment_sensor"],"scripts":[],"document":null,"attributes":[{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"MAC","default_value":null,"relative_name":"mac","decimal_places":2,"source_category":"config","attribute_limits":[],"updated_timestamp":"2023-10-17T17:02:12.755104+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Firmware Version","default_value":null,"relative_name":"firmware_version","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T16:26:30.365206+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Battery Level","default_value":null,"relative_name":"battery_level","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:21:04.502742+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":100,"min_value":0,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Humidity","default_value":null,"relative_name":"humidity","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:21:07.738054+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Temperature","default_value":null,"relative_name":"temperature","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:21:11.728449+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Type","default_value":null,"relative_name":"type","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:21:16.23187+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"none","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":"Wireless signal strength","edit_status":1,"is_required":false,"display_name":"RSSI","default_value":null,"relative_name":"rssi","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:21:19.679678+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"float","is_hidden":false,"max_value":null,"min_value":null,"expression":"for_each_in($.temperature, value::double precision)","importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"TemperatureNum","default_value":null,"relative_name":"temperaturenum","decimal_places":2,"source_category":"expression","attribute_limits":[],"updated_timestamp":"2023-10-18T17:28:21.983903+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":["thinkiq_base_library","celsius"]}],"importance":null,"description":null,"edit_status":1,"display_name":"NCD Environment Sensor","opcua_methods":[],"relative_name":"ncd_environment_sensor","classification":"equipment","child_equipment":[],"sub_type_of_fqn":["ncd_sensors","ncd_wireless_sensor"],"updated_timestamp":"2023-10-17T17:02:12.755104+00:00","unlink_relative_name":false},{"fqn":["ncd_sensors","ncd_light_sensor"],"scripts":[],"document":null,"attributes":[{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"MAC","default_value":null,"relative_name":"mac","decimal_places":2,"source_category":"config","attribute_limits":[],"updated_timestamp":"2023-10-17T17:03:16.823624+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Firmware Version","default_value":null,"relative_name":"firmware_version","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T16:26:30.365206+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":"Wireless signal strength","edit_status":1,"is_required":false,"display_name":"RSSI","default_value":null,"relative_name":"rssi","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:26:48.811359+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Type","default_value":null,"relative_name":"type","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:26:58.578031+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Proximity","default_value":null,"relative_name":"proximity","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:27:25.667052+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Battery Level","default_value":null,"relative_name":"battery_level","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:27:34.08459+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Brightness","default_value":null,"relative_name":"brightness","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T17:27:42.386314+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null}],"importance":null,"description":null,"edit_status":1,"display_name":"NCD Light Sensor","opcua_methods":[],"relative_name":"ncd_light_sensor","classification":"equipment","child_equipment":[],"sub_type_of_fqn":["ncd_sensors","ncd_wireless_sensor"],"updated_timestamp":"2023-10-17T17:03:16.823624+00:00","unlink_relative_name":false},{"fqn":["ncd_sensors","ncd_sensor_gateway"],"scripts":[],"document":null,"attributes":[{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"MAC","default_value":null,"relative_name":"mac","decimal_places":2,"source_category":"config","attribute_limits":[],"updated_timestamp":"2023-10-16T17:51:47.523986+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null}],"importance":null,"description":null,"edit_status":1,"display_name":"NCD Sensor Gateway","opcua_methods":[],"relative_name":"ncd_sensor_gateway","classification":"equipment","child_equipment":[],"sub_type_of_fqn":["ncd_sensors","sensor"],"updated_timestamp":"2023-10-12T17:46:36.667143+00:00","unlink_relative_name":false},{"fqn":["ncd_sensors","ncd_sensor_root"],"scripts":[{"run":false,"owner":"gregorvilkner","script":"<?php\r\n    /* Render UI for NCD Devices and Functions */\r\n\r\n    use Joomla\\CMS\\HTML\\HTMLHelper;\r\n\r\n    HTMLHelper::_('script', 'media/com_thinkiq/js/dist/tiq.core.min.js', array('version' => 'auto', 'relative' => false));\r\n    HTMLHelper::_('script', 'media/com_thinkiq/js/dist/tiq.tiqGraphQL.min.js', array('version' => 'auto', 'relative' => false));\r\n    HTMLHelper::_('script', 'media/com_thinkiq/js/dist/tiq.components.min.js', array('version' => 'auto', 'relative' => false));\r\n    // HTMLHelper::_('script', 'media/com_thinkiq/js/dist/tiq.charts.min.js', array('version' => 'auto', 'relative' => false));\r\n\r\n    require_once 'thinkiq_context.php';\r\n    $context = new Context();\r\n\r\n    //Find scripts\r\n    use TiqUtilities\\Model\\Script;\r\n\r\n    // ncd detector knows how to find new stuff\r\n    $ncdDetector = new Script('ncd_sensors.ncd_object_discovery');\r\n    $ncdDetector->script=\"\";\r\n\r\n    // ncd purge does what it's named for ...\r\n    $ncdDeletor = new Script('ncd_sensors.ncd_purge');\r\n    $ncdDeletor->script=\"\";\r\n\r\n    // let's get rid of this since we're not using it at all\r\n    use Joomla\\CMS\\Factory;\r\n    $user = Factory::getUser();\r\n\r\n?>\r\n\r\n<div id=\"app\">\r\n\r\n    <!-- Page Header -->    \r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n        <h1 class=\"pb-2 pt-2\" style=\"font-size:2.5rem; color:#126181;\">\r\n            {{pageTitle}}                \r\n            <a v-if=\"true\" class=\"float-end btn btn-sm btn-link mt-2\" style=\"font-size:1rem; color:#126181;\" v-bind:href=\"`/index.php?option=com_modeleditor&view=script&id=${context.std_inputs.script_id}`\" target=\"_blank\">\r\n                source\r\n            </a>            \r\n        </h1>            \r\n        <hr style=\"border-color:#126181; border-width:medium;\" />        \r\n        </div>       \r\n    </div> \r\n\r\n    <!-- Toolbar -->\r\n    <div class=\"mb-4\">\r\n        <button class=\"btn btn-primary\" @click=\"DetectNCDDevices\" style=\"background-color:darkgreen\">Discover NCD Devices</button>\r\n        <button class=\"btn btn-primary\" onclick=\"location.reload();\">Refresh</button>\r\n        <button class=\"btn btn-primary\" @click=\"PurgeNCDDevices\" style=\"background-color:maroon\">Remove NCD Devices</button>\r\n        <span>Result: {{output}}</span>\r\n    </div>\r\n\r\n    <!-- Iterate through Gateways -->    \r\n    <div v-for=\"aGateway in gateways\" class=\"card w-100\">\r\n        <div class=\"card-body\">\r\n            <h5 class=\"card-title\">\r\n                {{aGateway.displayName}}\r\n            </h5>            \r\n            <h6 class=\"card-subtitle mb-2 text-muted\">mac: {{aGateway.attributes[0].stringValue}}</h6>\r\n            <div class=\"row mt-4\">   \r\n                         \r\n                <!-- Iterate through Sensors -->                \r\n                <div v-for=\"aSensor in aGateway.childEquipment\" class=\"col-2\">                    \r\n                    <div class=\"card\" style=\"min-height: 20rem;\">                        \r\n                        <div class=\"card-body\">                            \r\n                            <h5 class=\"card-title\">{{aSensor.displayName}}</h5>                            \r\n                            <h6 class=\"card-subtitle mb-2 text-muted\">mac: {{aSensor.attributes.find(x=>x.displayName==\"MAC\").stringValue}}</h6>\r\n                            <!-- More stuff for each sensor here -->\r\n                            <!-- Maybe use v-if for different sensor types --> \r\n                            <div v-if=\"aSensor.typeName=='ncd_environment_sensor'\"> \r\n                                <p>This is an environment sensor.</p>                           \r\n                                <p>                         \r\n                                    <label>Temperature:</label>         \r\n                                    <span v-if=\"aSensor.attributes.find(x=>x.displayName=='Temperature').getTimeSeries.length>0\">\r\n                                        {{aSensor.attributes.find(x=>x.displayName==\"Temperature\").getTimeSeries[0].stringvalue}} °C   \r\n                                    </span>  \r\n                                    <sparkline-chart\r\n                                        :id='aSensor.attributes.find(x=>x.displayName==\"Temperature\").id'\r\n                                        :show-x-axis='false'\r\n                                        :show-y-axis='false'\r\n                                        :show-border='false'\r\n                                        :show-tooltip='true'\r\n                                        :duration='3600'\r\n                                        :offset='0'\r\n                                        :live-mode='true'\r\n                                        :refresh-interval='10'\r\n                                    />\r\n\r\n                                </p>                  \r\n                                <p>     \r\n                                    <label>Humidity:</label>        \r\n                                    <span v-if=\"aSensor.attributes.find(x=>x.displayName=='Humidity').getTimeSeries.length>0\">\r\n                                        {{aSensor.attributes.find(x=>x.displayName==\"Humidity\").getTimeSeries[0].stringvalue}} %     \r\n                                    </span>\r\n                                    <sparkline-chart\r\n                                        :id='aSensor.attributes.find(x=>x.displayName==\"Humidity\").id'\r\n                                        :show-x-axis='false'\r\n                                        :show-y-axis='false'\r\n                                        :show-border='false'\r\n                                        :show-tooltip='true'\r\n                                        :duration='3600'\r\n                                        :offset='0'\r\n                                        :live-mode='true'\r\n                                        :refresh-interval='10'\r\n                                    />\r\n                                </p>                          \r\n                            </div>            \r\n                            <div v-if=\"aSensor.typeName=='ncd_light_sensor'\">          \r\n                                <p>This is a light sensor.</p>                            \r\n                                <p>                            \r\n                                    <label>Brightness:</label>     \r\n                                    <span v-if=\"aSensor.attributes.find(x=>x.displayName=='Brightness').getTimeSeries.length>0\">\r\n                                        {{aSensor.attributes.find(x=>x.displayName==\"Brightness\").getTimeSeries[0].stringvalue}} lx     \r\n                                    </span>\r\n                                    <sparkline-chart\r\n                                        :id='aSensor.attributes.find(x=>x.displayName==\"Brightness\").id'\r\n                                        :show-x-axis='false'\r\n                                        :show-y-axis='false'\r\n                                        :show-border='false'\r\n                                        :show-tooltip='true'\r\n                                        :duration='3600'\r\n                                        :offset='0'\r\n                                        :live-mode='true'\r\n                                        :refresh-interval='10'\r\n                                    />\r\n                                </p>                     \r\n                                <p>                  \r\n                                    <label>Proximity:</label> \r\n                                    <span v-if=\"aSensor.attributes.find(x=>x.displayName=='Proximity').getTimeSeries.length>0\">\r\n                                        {{aSensor.attributes.find(x=>x.displayName==\"Proximity\").getTimeSeries[0].stringvalue}} mm    \r\n                                    </span>\r\n                                    <sparkline-chart\r\n                                        :id='aSensor.attributes.find(x=>x.displayName==\"Proximity\").id'\r\n                                        :show-x-axis='false'\r\n                                        :show-y-axis='false'\r\n                                        :show-border='false'\r\n                                        :show-tooltip='true'\r\n                                        :duration='3600'\r\n                                        :offset='0'\r\n                                        :live-mode='true'\r\n                                        :refresh-interval='10'\r\n                                    />\r\n                                </p>                    \r\n                            </div>      \r\n                        </div> \r\n                    </div>  \r\n                </div>   \r\n            </div>        \r\n        </div>    \r\n    </div>\r\n</div>\r\n<script>    \r\n    var WinDoc = window.document;\r\n\r\n    var app = new Vue({   \r\n\r\n        el: \"#app\",  \r\n\r\n        data() {\r\n            return {                \r\n                pageTitle: \"NCD Explorer\",   \r\n                context:<?php echo json_encode($context) ?>,      \r\n                user:<?php echo json_encode($user) ?>,   \r\n                gateways: [],\r\n                output: '',\r\n                ncdDetectorApi : <?php echo json_encode($ncdDetector); ?>,\r\n                ncdDeletorApi : <?php echo json_encode($ncdDeletor); ?>,\r\n     \r\n            }     \r\n        },    \r\n\r\n        mounted: async function () { \r\n            WinDoc.title = this.pageTitle;\r\n            await this.GetGatewaysAsync();\r\n        },\r\n        \r\n        computed: {\r\n            NowIsh: function(){\r\n                return new moment();\r\n            }\r\n        },\r\n\r\n        methods: {\r\n\r\n            CallScriptAsync: async function(scriptFileName, f, a){\r\n                let apiRoute = `/index.php?option=com_thinkiq&task=invokeScript`;\r\n                let settings = { method: 'POST', headers: {} };\r\n                let formData = new FormData();\r\n                formData.append('script_name', scriptFileName);\r\n                formData.append('output_type', 'browser');\r\n                formData.append('function', f);\r\n                formData.append('argument', JSON.stringify(a));\r\n                settings.body = formData;\r\n\r\n                let aResponse = await fetch(apiRoute, settings);\r\n                let aResponseData = await aResponse.json();\r\n                return aResponseData;\r\n            },\r\n\r\n            DetectNCDDevices: async function(){\r\n                console.log(\"calling: \" + this.ncdDetectorApi.script_file_name);\r\n                let aResponse = await this.CallScriptAsync(this.ncdDetectorApi.script_file_name, null, null)\r\n                console.log(aResponse);\r\n                this.output = \"Discovery Complete!\";\r\n\r\n                // let's refresh the app, so we know who's new in town...\r\n                await this.GetGatewaysAsync();\r\n\r\n            },\r\n\r\n            PurgeNCDDevices: async function(){\r\n                console.log(\"calling: \" + this.ncdDetectorApi.script_file_name);\r\n\r\n                let aResponse = await this.CallScriptAsync(this.ncdDeletorApi.script_file_name, null, null)\r\n                console.log(aResponse);\r\n                this.output = \"Purged all devices!\";\r\n\r\n                // let's refresh the app, so we know who's still standing...\r\n                await this.GetGatewaysAsync();\r\n            },\r\n\r\n            GetGatewaysAsync: async function () {    \r\n                let query = `            \r\n                query MyQuery {           \r\n                    object(id: \"${this.context.std_inputs.node_id}\") {    \r\n                        id                  \r\n                        displayName      \r\n                        asThing {\r\n                            equipmentByPartOfId {                \r\n                                id                          \r\n                                displayName                         \r\n                                attributes {                \r\n                                    id      \r\n                                    displayName           \r\n                                    stringValue                   \r\n                                }                         \r\n                                childEquipment {                     \r\n                                    id                             \r\n                                    displayName                     \r\n                                    attributes {          \r\n                                        id                                     \r\n                                        displayName            \r\n                                        relativeName       \r\n                                        stringValue\r\n                                        getTimeSeries(startTime:\"${(new moment()).toISOString()}\" endTime:\"${(new moment()).toISOString()}\") {\r\n                                            id\r\n                                            ts\r\n                                            stringvalue\r\n                                        }    \r\n                                    }\r\n                                    typeName                          \r\n                                }            \r\n                            }      \r\n                        }            \r\n                    }       \r\n                }    \r\n                `;\r\n                let aResponse = await tiqGraphQL.makeRequestAsync(query);\r\n                this.gateways = aResponse.data.object.asThing.equipmentByPartOfId;            \r\n            }        \r\n        },    \r\n    });\r\n</script>","document":{"template":false},"importance":null,"description":"A dashboard rendering discovered NCD Devices","edit_status":1,"output_type":"display","script_type":"php","display_name":"NCD Explorer","relative_name":"ncd_explorer","initial_inputs":{"start_timestamp":"2023-10-18T17:43:23.000+00:00","interval_seconds":"60"},"cron_expression":"0 * * * * ? *","exec_on_derived":false,"updated_timestamp":"2023-10-19T11:59:59.271052+00:00","max_acceptable_run_secs":0,"use_outputs_from_last_run":true}],"document":null,"attributes":[],"importance":null,"description":null,"edit_status":1,"display_name":"NCD Sensor Root","opcua_methods":[],"relative_name":"ncd_sensor_root","classification":"object","child_equipment":[],"sub_type_of_fqn":["thinkiq_base_library","object"],"updated_timestamp":"2023-10-16T17:00:37.237718+00:00","unlink_relative_name":false},{"fqn":["ncd_sensors","ncd_wireless_sensor"],"scripts":[],"document":null,"attributes":[{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"MAC","default_value":null,"relative_name":"mac","decimal_places":2,"source_category":"config","attribute_limits":[],"updated_timestamp":"2023-10-17T17:00:34.929279+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"float","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":"Wireless signal strength","edit_status":1,"is_required":false,"display_name":"RSSI","default_value":null,"relative_name":"rssi","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-17T17:01:19.34977+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"float","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Battery Level","default_value":null,"relative_name":"battery_level","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T16:15:00.780974+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"linear","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Firmware Version","default_value":null,"relative_name":"firmware_version","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T16:26:30.365206+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null},{"icon":null,"document":null,"data_type":"int","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"Type","default_value":null,"relative_name":"type","decimal_places":2,"source_category":"dynamic","attribute_limits":[],"updated_timestamp":"2023-10-18T16:26:43.248539+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null}],"importance":null,"description":null,"edit_status":1,"display_name":"NCD Wireless Sensor","opcua_methods":[],"relative_name":"ncd_wireless_sensor","classification":"equipment","child_equipment":[],"sub_type_of_fqn":["ncd_sensors","ncd_sensor_gateway"],"updated_timestamp":"2023-10-17T17:01:59.815789+00:00","unlink_relative_name":false},{"fqn":["ncd_sensors","sensor"],"scripts":[],"document":null,"attributes":[{"icon":null,"document":null,"data_type":"string","is_hidden":false,"max_value":null,"min_value":null,"expression":null,"importance":10,"description":null,"edit_status":1,"is_required":false,"display_name":"MAC","default_value":null,"relative_name":"mac","decimal_places":2,"source_category":"config","attribute_limits":[],"updated_timestamp":"2023-10-16T19:17:12.689297+00:00","attribute_type_fqn":[],"associated_event_ids":null,"enumeration_type_fqn":null,"interpolation_method":"previous","unlink_relative_name":false,"object_history_type_id":null,"default_enumeration_values":null,"default_measurement_unit_fqn":null}],"importance":null,"description":null,"edit_status":1,"display_name":"Sensor","opcua_methods":[],"relative_name":"sensor","classification":"equipment","child_equipment":[],"sub_type_of_fqn":["thinkiq_base_library","equipment"],"updated_timestamp":"2023-10-12T17:45:55.701087+00:00","unlink_relative_name":false},{"fqn":["thinkiq_base_library","equipment"],"scripts":[],"document":null,"attributes":[],"importance":10,"description":"Base type of equipment types.","edit_status":1,"display_name":"Equipment","opcua_methods":[],"relative_name":"equipment","classification":"equipment","child_equipment":[],"sub_type_of_fqn":null,"updated_timestamp":"2022-08-02T00:48:48.107651+00:00","unlink_relative_name":false},{"fqn":["thinkiq_base_library","object"],"scripts":[],"document":null,"attributes":[],"importance":10,"description":"Base type of all types.","edit_status":1,"display_name":"Generic Object","opcua_methods":[],"relative_name":"object","classification":"object","child_equipment":[],"sub_type_of_fqn":null,"updated_timestamp":"2023-03-21T22:43:15.717698+00:00","unlink_relative_name":false}],"objects":[],"libraries":[{"fqn":["local_library"],"locked":false,"models":null,"aliases":null,"version":"1.0.0","document":null,"licensing":null,"extensions":null,"importance":10,"description":"The library storing type system locally","edit_status":1,"server_uris":null,"display_name":"Local Library","relative_name":"local_library","namespace_uris":null,"updated_timestamp":"2021-02-25T00:01:15.797588+00:00","unlink_relative_name":false},{"fqn":["ncd_sensors"],"locked":false,"models":null,"aliases":null,"version":"1.0.0","document":null,"licensing":null,"extensions":null,"importance":null,"description":null,"edit_status":1,"server_uris":null,"display_name":"NCD Sensors","relative_name":"ncd_sensors","namespace_uris":null,"updated_timestamp":"2023-10-12T17:45:23.079891+00:00","unlink_relative_name":false},{"fqn":["thinkiq_base_library"],"locked":true,"models":null,"aliases":null,"version":"1.7.0","document":null,"licensing":"The ThinkIQ Base Library is copyright protected.","extensions":null,"importance":10,"description":"ThinkIQ Base Library","edit_status":1,"server_uris":null,"display_name":"ThinkIQ Base Library","relative_name":"thinkiq_base_library","namespace_uris":null,"updated_timestamp":"2023-09-22T07:08:08.134715+00:00","unlink_relative_name":false}],"quantities":[{"fqn":["thinkiq_base_library","temperature_quantity"],"document":null,"importance":10,"description":"The physical property of matter that quantitatively expresses the common notions of hot and cold","edit_status":1,"display_name":"Temperature quantity","relative_name":"temperature_quantity","quantity_symbol":"T","updated_timestamp":"2022-09-14T05:16:01.824244+00:00","unlink_relative_name":false}],"relationships":[],"opcua_variables":[],"opcua_data_types":[],"script_templates":[{"fqn":["ncd_sensors","ncd_object_discovery"],"run":false,"owner":"cesmiihq","script":"<?php\r\n/* Discover all NCD Devices from tags and add to Model */\r\nrequire_once 'thinkiq_context.php';\r\n$context = new Context();\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\nuse \\TiqUtilities\\Model\\Organization;\r\nuse \\TiqUtilities\\Model\\Script;\r\n$results = [];\r\n\r\n/* Main Code */\r\n\r\n//Find our types\r\n$ncdRootType = new Type('ncd_sensors.ncd_sensor_root');\r\n$ncdGatewayType = new Type('ncd_sensors.ncd_sensor_gateway');\r\n$ncdSensorTypes = [new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_environment_sensor'), new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_wireless_sensor'), new Type('ncd_sensors.ncd_light_sensor')];\r\n\r\n//Find which organization to attach objects to\r\n$rootOrg = null;\r\n$orgs = Organization::getNodeSet(\"organizations\")[\"set\"];\r\n$root_orgs = array_filter($orgs, function($aOrg) {\r\n    return $aOrg->part_of_id==null;\r\n});\r\nif (!isset($root_orgs) || count($root_orgs) < 1) {\r\n    die(\"Could not find the root org!\");\r\n}\r\n$rootOrg = $root_orgs[0];\r\n$results[] = \"Using root org: \" . $rootOrg->display_name;\r\n\r\n//Find or create NCD Root\r\n$ncdRoot = findNCDRoot($ncdRootType, $results);\r\nif (!isset($ncdRoot)) {\r\n    $equipment = new Equipment();\r\n    $equipment->display_name = 'NCD Sensors';\r\n    $equipment->description = 'The root node for NCD Sensors';\r\n    $equipment->type_id = $ncdRootType->id;\r\n    $equipment->part_of_id = $root_orgs[0]->id;\r\n    try {\r\n        $equipment->save();\r\n        $results[] = 'Created NCD Sensor root in: ' . $rootOrg->display_name;\r\n        $ncdRoot = $equipment;\r\n    }\r\n    catch (Exception $e) {\r\n        die (\"Could not find or create a NCD sensor root: \" . $e);\r\n    }\r\n}\r\n\r\n//Find existing NCD instance objects\r\n$knownGateways = [];\r\n$knownGatewayIds = [];\r\n$knownSensors = [];\r\n$ncdRoot->getChildren();\r\nforeach($ncdRoot->children as $aChild){\r\n    if ($aChild->type_id == $ncdGatewayType->id) {\r\n        $validGateway = false;\r\n        $aChild->getAttributes();\r\n        foreach($aChild->attributes as $aAttribute){\r\n            if ($aAttribute->display_name == \"MAC\") {\r\n                array_push($knownGateways, $aAttribute->current_value);\r\n                array_push($knownGatewayIds, $aChild->id);\r\n                $validGateway = true;\r\n                $results[] =  \"Model has gateway (\" . $aChild->id . \") \" . $aChild->display_name . \" with MAC \" . $aAttribute->current_value;\r\n            }\r\n        }\r\n        if ($validGateway) {\r\n            $aChild->getChildren();\r\n            foreach($aChild->children as $bChild){\r\n                $bChild->getAttributes();\r\n                foreach($bChild->attributes as $bAttribute) {\r\n                    if ($bAttribute->display_name == \"MAC\") {\r\n                        array_push($knownSensors, $bAttribute->current_value);\r\n                        $results[] = \"Model has sensor: \" . $bChild->display_name . \" with MAC \" . $bAttribute->current_value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        $results[] =  $aChild->type_id . \" does not match \" . $ncdGatewayType->id;\r\n    }\r\n}\r\n$results[] = \"Count of known gateways: \" . count($knownGateways);\r\n$results[] = \"Count of known sensors: \" . count($knownSensors);\r\n\r\n//Look for NCD-looking tags\r\n$query = \"SELECT id, display_name FROM model.tags where display_name like 'gateway%' limit 100;\" ;\r\n$ncdTags = Node::GetDb()->run($query)->fetchAll();\r\nforeach ($ncdTags as $ncdTag) {\r\n    $tagParts = explode(\"/\", $ncdTag['display_name']);\r\n    $currentGatewayId = null;\r\n    $currentGatewayMac = null;\r\n    //Look for gateways\r\n    if (count($tagParts) > 0) {\r\n        if ($tagParts[0] == \"gateway\") {    //Make sure they're valid\r\n            if (isset($tagParts[1]) && str_contains($tagParts[1], \":\")) {\r\n                $gatewayMac = $tagParts[1];\r\n                if (!in_array($gatewayMac, $knownGateways)) {   //Create new gateway if match not found in model\r\n                    $results[] = \"Need to create a new gateway with MAC \" . $gatewayMac;\r\n                    $newId = createNCDGateway($gatewayMac, (count($knownGateways) + 1), $ncdGatewayType->id, $ncdRoot, $results);\r\n                    if (isset($newId)) {         //Remember this newly created gateway so we don't re-create it later\r\n                        array_push($knownGateways, $gatewayMac);\r\n                        array_push($knownGatewayIds, $newId);\r\n                    }\r\n                } else {    //Use existing gateway if match found in model\r\n                    $gwIndex = array_search($gatewayMac, $knownGateways); \r\n                    $currentGatewayId = $knownGatewayIds[$gwIndex];\r\n                    $currentGatewayMac = $knownGateways[$gwIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        //Look for sensors\r\n        if (count($tagParts) > 6) {\r\n            if ($tagParts[2] == \"sensor\") {    //Make sure they're valid\r\n                if (isset($tagParts[3]) && str_contains($tagParts[3], \":\")) {\r\n                    $sensorMac = $tagParts[5];\r\n                    if (!in_array($sensorMac, $knownSensors)) {     //Create new sensor if match not found in model\r\n                        //Detect sensor type\r\n                        if (isset($tagParts[6]) && ($tagParts[6] == \"humidity\" || $tagParts[6] == \"temperature\")) { //Environment sensor type\r\n                            $results[] = \"Need to create a new sensor with MAC \" . $sensorMac . \" of type: environment\";\r\n                            createEquipment($sensorMac, \"Environment Sensor\", $ncdSensorTypes[1]->id, $currentGatewayId, $currentGatewayMac, $results);\r\n                            array_push($knownSensors, $sensorMac);    //Remember this newly created gateway so we don't re-create it later\r\n                        }\r\n                        if (isset($tagParts[6]) && ($tagParts[6] == \"lux\" || $tagParts[6] == \"proximity\")) {    //Light sensor type\r\n                            $results[] = \"Need to create a new sensor with MAC \" . $sensorMac . \" of type: light\";\r\n                            createEquipment($sensorMac, \"Light Sensor\", $ncdSensorTypes[9]->id, $currentGatewayId, $currentGatewayMac, $results);\r\n                            array_push($knownSensors, $sensorMac);    //Remember this newly created gateway so we don't re-create it later\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        //Note unusual tag structure and move on\r\n        $results[] = \"Discovered tag \" . $ncdTag['display_name'] . \" does not have a gateway\";\r\n    }\r\n}\r\ndie (json_encode($results));\r\n\r\n/* Helper Functions */\r\n\r\n//Search in model for a NCD Root node\r\nfunction findNCDRoot($ncdRootType, &$results) {\r\n    $ncdRootType->getInstances();\r\n    foreach ($ncdRootType->instances as $aInstance) {\r\n        $ncdRoot = $aInstance;\r\n        return $ncdRoot;\r\n    }\r\n    return null;\r\n}\r\n\r\n//Create an instance of an NCD Gateway equipment type in the model\r\nfunction createNCDGateway($mac, $suffix, $typeId, $parentObj, &$results) {\r\n    $equipment = new Equipment();\r\n    $equipment->display_name = 'NCD Gateway ' . $suffix ;\r\n    $equipment->type_id = $typeId;\r\n    $equipment->part_of_id = $parentObj->id;\r\n    $equipment->description = 'Discovered automatically at ' . (new DateTime())->format(DateTimeInterface::RFC3339_EXTENDED);\r\n    try {\r\n        $equipment->save();\r\n        $equipment->getAttributes();\r\n        $equipment->attributes['mac']->string_value = $mac;\r\n        $equipment->attributes['mac']->save();\r\n        array_push($results, 'Created new gateway with MAC: ' . $mac . \", ID: \". $equipment->id);\r\n        return $equipment->id;\r\n    }\r\n    catch (Exception $e) {\r\n        array_push($results, 'Failed to create new gateway with MAC: ' . $mac . $e);\r\n        return null;\r\n    }\r\n}\r\n\r\n//Create an instance of an NCD Sensor equipment type in the model, using a sub-type for the appropriate NCD sensor\r\nfunction createEquipment($mac, $suffix, $typeId, $parentId, $parentMac, &$results) {\r\n    // global $results;\r\n    $equipment = new Equipment();\r\n    $equipment->display_name = 'NCD ' . $suffix;\r\n    $equipment->type_id = $typeId;\r\n    $equipment->part_of_id = $parentId;\r\n    $equipment->description = \"Discovered automatically at \" . (new DateTime())->format(DateTimeInterface::RFC3339_EXTENDED);\r\n\r\n    try {\r\n        $equipment->save();\r\n        array_push($results, \"Created new equipment with MAC: \" . $mac . \", ID:\" . $equipment->id . \", child of Gateway with MAC: \" . $parentMac);\r\n        $equipment->getAttributes();\r\n        $equipment->attributes['mac']->string_value = $mac;\r\n        $equipment->attributes['mac']->save();\r\n        bindEquipmentTags($equipment, $mac, $suffix, $parentMac, $results);\r\n        return $equipment->id;\r\n    }\r\n    catch (Exception $e) {\r\n        array_push($results, \"Failed to create Equipment. It may already exist in the model! \" . $e);\r\n    }\r\n}\r\n\r\n//Logic to parse MQTT topic/payload naming to attribute-to-tag mappings\r\n//  This should be a WoT file\r\nfunction bindEquipmentTags($equipmentNode, $sensorMac, $ncdTypeName, $parentMac, &$results) {\r\n    // global $results;\r\n    $tagRoot = \"gateway/\" . $parentMac . \"/sensor/\" . $sensorMac . \"/:/\" . $sensorMac . \"/\";\r\n    $tags = [\r\n        \"firmware_version\",\r\n        \"battery_level\",\r\n        \"rssi\"\r\n    ];\r\n    $attribs = [\r\n        \"firmware_version\",\r\n        \"battery_level\",\r\n        \"rssi\"\r\n    ];\r\n    switch ($ncdTypeName) {\r\n        case \"Environment Sensor\": {\r\n            array_push($tags, \"humidity\");\r\n            array_push($attribs, \"humidity\");\r\n            array_push($tags, \"temperature\");\r\n            array_push($attribs, \"temperature\");\r\n            break;\r\n        }\r\n        case \"Light Sensor\": {\r\n            array_push($tags, \"proximity\");\r\n            array_push($attribs, \"proximity\");\r\n            array_push($tags, \"lux\");\r\n            array_push($attribs, \"brightness\");\r\n            break;\r\n        }\r\n    }\r\n    $i = 0;\r\n    foreach ($tags as $tag) {\r\n        array_push($results, \"Binding tag: \" . $tagRoot . $tag . \" to: \" . $equipmentNode->id . \":\" . $attribs[$i]);\r\n        $query = \"SELECT * FROM model.tags where display_name='\" . $tagRoot . $tag . \"';\" ;\r\n        $result = Node::GetDb()->run($query)->fetch();\r\n        if($result != false) {\r\n            $equipmentNode->getAttributes();\r\n            $equipmentNode->attributes[$attribs[$i]]->data_source = \"tag\";\r\n            $equipmentNode->attributes[$attribs[$i]]->tag_id = $result[\"id\"];\r\n            $equipmentNode->attributes[$attribs[$i]]->save();\r\n            try{\r\n                $equipmentNode->save();\r\n                array_push($results, \"Success: Tag bound to instance attribute!\");\r\n            } catch (Exception $e) {\r\n                array_push($results, \"Failure: Could not bind tag to instance attribute: \",  $e->getMessage());\r\n            }\r\n        } else {\r\n            array_push($results, \"Could not find tag to bind to instance attribute!\");\r\n        }\r\n        $i++;\r\n    }\r\n}","document":{"template":false},"importance":null,"description":"A headless script to discover NCD devices based on tags from a connector and instantiate them in the model","edit_status":1,"output_type":"headless","script_type":"php","display_name":"NCD Object Discovery","relative_name":"ncd_object_discovery","initial_inputs":{"start_timestamp":"2023-10-12T18:58:26.000+00:00","interval_seconds":"60"},"cron_expression":"0 * * * * ? *","exec_on_derived":false,"updated_timestamp":"2023-10-19T11:56:04.086045+00:00","max_acceptable_run_secs":0,"use_outputs_from_last_run":false},{"fqn":["ncd_sensors","ncd_purge"],"run":false,"owner":"cesmiihq","script":" <?php\r\n\r\n/* Purge all NCD Devices from Model */\r\n\r\nrequire_once 'thinkiq_context.php';\r\n$context = new Context();\r\n\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\n\r\nfunction findNCDRoot($ncdRootType) {\r\n    $ncdRootType->getInstances();\r\n    foreach ($ncdRootType->instances as $aInstance) {\r\n        $ncdRoot = $aInstance;\r\n        return $ncdRoot;\r\n    }\r\n    return null;\r\n}\r\n\r\n$ncdRootType = new Type('ncd_sensors.ncd_sensor_root');\r\n$ncdRoot = findNCDRoot($ncdRootType);\r\n\r\n$ncdRoot->getChildren();\r\nforeach($ncdRoot->children as $aChild) {\r\n    $results[] = \"Deleting node \" .  $aChild->display_name . \" \" . $aChild->id;\r\n    $aChild->delete();\r\n}\r\n\r\ndie ('{\"operation\": \"purge\", \"result\": true}');","document":{"template":false},"importance":null,"description":"A headless script to remove all discovered NCD devices from the model","edit_status":1,"output_type":"headless","script_type":"php","display_name":"NCD Purge","relative_name":"ncd_purge","initial_inputs":{"start_timestamp":"2023-10-18T22:20:42.000+00:00","interval_seconds":"60"},"cron_expression":"0 * * * * ? *","exec_on_derived":false,"updated_timestamp":"2023-10-19T11:58:14.711381+00:00","max_acceptable_run_secs":0,"use_outputs_from_last_run":false}],"enumeration_types":[],"measurement_units":[{"fqn":["thinkiq_base_library","celsius"],"symbol":"°C","document":null,"is_hidden":false,"importance":10,"unece_code":"CEL","unece_name":"degree Celsius","description":"A scale and unit of measurement for temperature. Also known as centigrade.","edit_status":1,"display_name":"°Celsius","quantity_fqn":["thinkiq_base_library","temperature_quantity"],"opcua_unit_id":4408652,"relative_name":"celsius","conversion_offset":273.15,"updated_timestamp":"2022-09-14T05:16:01.824244+00:00","unlink_relative_name":false,"conversion_multiplier":1}],"relationship_types":[],"opcua_variable_types":[],"opcua_reference_types":[],"md5_checksum":"96acf8ad8c6de02b86561953f4934e95"}